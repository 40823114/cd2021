<h1>主頁</h1>
<p>個人倉儲:<a href="https://github.com/40823114/cd2021.git">https://github.com/40823114/cd2021.git</a></p>
<p>小組倉儲:<a href="https://github.com/40823146/stage1-ag16">https://github.com/40823146/stage1-ag16</a></p>
<p>小組網站:<a href="https://40823114.github.io/stage1-ag16">https://40823146.github.io/stage1-ag16</a></p>
<h1>stage1-ag16</h1>
<h2>題目</h2>
<p><span>stage1-ag16</span><br/><span>題目：電風扇</span><br/><span>動機：因為天氣變熱了</span><br/><span>W2:繪製零件</span><br/><span>W3:使用Coppeliasim模擬動作並除錯</span><br/><span>W4:報告</span></p>
<h2>W2進度</h2>
<p><span>各部位零件</span></p>
<p><span>風扇</span></p>
<p><img alt="" height="514" src="/images/風扇.jpg" width="1000"/></p>
<p>網蓋</p>
<p><img alt="" height="513" src="/images/前網蓋.jpg" width="1000"/></p>
<p>軸</p>
<p><img alt="" height="512" src="/images/軸.jpg" width="1000"/></p>
<p>馬達</p>
<p><img alt="" height="513" src="/images/馬達.jpg" width="1000"/></p>
<p>底座</p>
<p><img alt="" height="513" src="/images/底座.jpg" width="1000"/></p>
<h2>W3進度</h2>
<p>組合</p>
<p><br/><img alt="" height="512" src="/images/電風扇.jpg" width="1000"/><br/><br/><br/><span></span></p>
<h2>製圖過程</h2>
<p><span>畫的時候忘記錄 所以用隱藏回放</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/MKxoqHTIJEY" width="560"></iframe></p>
<p><span>組裝過程忘記錄 所以同心軸是已經處理好的</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/m_txLI59nq4" width="560"></iframe></span><span></span></p>
<h2>問題修正</h2>
<p>馬達與底座連接處沒有選取面，頭沒辦法旋轉，所以多加一段圓柱當主軸。</p>
<p><img alt="" height="516" src="/images/修正1.jpg" width="1000"/></p>
<h1>stage2-ag9</h1>
<h2>題目</h2>
<p><span>stage2-ag9</span><br/><span>題目：旋轉木馬音樂盒</span><br/><span>W5:繪製零件</span><br/><span>W6~8:使用Coppeliasim模擬動作並除錯</span><br/><span>W9:報告</span></p>
<p>我負責繪製所有零件及組合圖，齒輪為Solidwork內建。</p>
<h2>W5進度</h2>
<p>齒輪箱</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/W9A1Jn5drKk" width="560"></iframe></p>
<p>連桿1</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/78grlCHElkE" width="560"></iframe></p>
<p>連桿2</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Rlip7dLG7uU" width="560"></iframe></p>
<h2>W6進度</h2>
<p>輪子</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/CYlngGQPzgs" width="560"></iframe></p>
<p>連桿軸</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/5lYiA5mekx8" width="560"></iframe></p>
<p>底座2</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/_07-QpyfEIU" width="560"></iframe></p>
<p>上主軸2</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/m5JKsyPWzMM" width="560"></iframe></p>
<h2>W7進度</h2>
<p>底座2更新</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/rxllYBTJLbk" width="560"></iframe></p>
<p>上主軸2更新</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/mNDJneElV0k" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/gBnPimxnt2I" width="560"></iframe></p>
<h2>W8進度</h2>
<p>馬</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/vKyGof5Wzk0" width="560"></iframe></p>
<h2>W9進度</h2>
<p>報告</p>
<p>組合圖沒有錄影</p>
<p>模擬失敗</p>
<p>模擬影片</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/cSTjKB_MVNQ" width="560"></iframe></p>
<h2>問題整理</h2>
<p>針對繪圖部分整理。</p>
<p>題目很早就決定好了，但是結構設計參考網路資料後，沒有達到預期的成效。</p>
<p>外型，尺寸拿捏都需要再加強。</p>
<p>結構沒辦法配合CoppeliaSim的物理碰撞做出有效的運動。</p>
<h1>stage3-ag4</h1>
<h2>直播內容</h2>
<p><a href="https://youtu.be/ELGSM1EytFY">https://youtu.be/ELGSM1EytFY</a></p>
<h2>RoboDK</h2>
<p>修改座標和數字 讓他來回</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/TkSk4zgq-5Y" width="560"></iframe></p>
<div class="line number1 index0 alt2"><code class="py comments">程式碼</code></div>
<div class="line number1 index0 alt2"><code class="py comments"></code></div>
<div class="line number1 index0 alt2">
<div class="line number1 index0 alt2"><code class="py comments"># KMOLab Portable RoboDK pick and place</code></div>
<div class="line number2 index1 alt1"><code class="py keyword">from</code> <code class="py plain">robolink </code><code class="py keyword">import</code> <code class="py keyword">*</code>    <code class="py comments"># API to communicate with robodk</code></div>
<div class="line number3 index2 alt2"><code class="py keyword">from</code> <code class="py plain">robodk </code><code class="py keyword">import</code> <code class="py keyword">*</code>      <code class="py comments"># robodk robotics toolbox</code></div>
<div class="line number4 index3 alt1"> </div>
<div class="line number5 index4 alt2"><code class="py comments"># Setup global parameters</code></div>
<div class="line number6 index5 alt1"><code class="py plain">BALL_DIAMETER </code><code class="py keyword">=</code> <code class="py value">100</code> <code class="py comments"># diameter of one ball</code></div>
<div class="line number7 index6 alt2"><code class="py plain">APPROACH </code><code class="py keyword">=</code> <code class="py value">100</code>      <code class="py comments"># approach distance to grab each part, in mm</code></div>
<div class="line number8 index7 alt1"><code class="py plain">nTCPs </code><code class="py keyword">=</code> <code class="py value">6</code>           <code class="py comments"># number of TCP's in the tool</code></div>
<div class="line number9 index8 alt2"> </div>
<div class="line number10 index9 alt1"><code class="py comments">#----------------------------------------------</code></div>
<div class="line number11 index10 alt2"><code class="py comments"># Function definitions</code></div>
<div class="line number12 index11 alt1"> </div>
<div class="line number13 index12 alt2"><code class="py keyword">def</code> <code class="py plain">box_calc(BALLS_SIDE</code><code class="py keyword">=</code><code class="py value">4</code><code class="py plain">, BALLS_MAX</code><code class="py keyword">=</code><code class="py color1">None</code><code class="py plain">):</code></div>
<div class="line number14 index13 alt1"><code class="py spaces">    </code><code class="py comments">"""Calculate a list of points (ball center) as if the balls were stored in a box"""</code></div>
<div class="line number15 index14 alt2"><code class="py spaces">    </code><code class="py keyword">if</code> <code class="py plain">BALLS_MAX </code><code class="py keyword">is</code> <code class="py color1">None</code><code class="py plain">: BALLS_MAX </code><code class="py keyword">=</code> <code class="py plain">BALLS_SIDE</code><code class="py keyword">*</code><code class="py keyword">*</code><code class="py value">3</code></div>
<div class="line number16 index15 alt1"><code class="py spaces">    </code><code class="py plain">xyz_list </code><code class="py keyword">=</code> <code class="py plain">[]</code></div>
<div class="line number17 index16 alt2"><code class="py spaces">    </code><code class="py keyword">for</code> <code class="py plain">h </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(BALLS_SIDE):</code></div>
<div class="line number18 index17 alt1"><code class="py spaces">        </code><code class="py keyword">for</code> <code class="py plain">i </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(BALLS_SIDE):</code></div>
<div class="line number19 index18 alt2"><code class="py spaces">            </code><code class="py keyword">for</code> <code class="py plain">j </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(BALLS_SIDE):</code></div>
<div class="line number20 index19 alt1"><code class="py spaces">                </code><code class="py plain">xyz_list </code><code class="py keyword">=</code> <code class="py plain">xyz_list </code><code class="py keyword">+</code> <code class="py plain">[[(i</code><code class="py keyword">+</code><code class="py value">0.5</code><code class="py plain">)</code><code class="py keyword">*</code><code class="py plain">BALL_DIAMETER, (j</code><code class="py keyword">+</code><code class="py value">0.5</code><code class="py plain">)</code><code class="py keyword">*</code><code class="py plain">BALL_DIAMETER, (h</code><code class="py keyword">+</code><code class="py value">0.5</code><code class="py plain">)</code><code class="py keyword">*</code><code class="py plain">BALL_DIAMETER]]</code></div>
<div class="line number21 index20 alt2"><code class="py spaces">                </code><code class="py keyword">if</code> <code class="py functions">len</code><code class="py plain">(xyz_list) &gt;</code><code class="py keyword">=</code> <code class="py plain">BALLS_MAX:</code></div>
<div class="line number22 index21 alt1"><code class="py spaces">                    </code><code class="py keyword">return</code> <code class="py plain">xyz_list</code></div>
<div class="line number23 index22 alt2"><code class="py spaces">    </code><code class="py keyword">return</code> <code class="py plain">xyz_list</code></div>
<div class="line number24 index23 alt1"> </div>
<div class="line number25 index24 alt2"><code class="py keyword">def</code> <code class="py plain">pyramid_calc(BALLS_SIDE</code><code class="py keyword">=</code><code class="py value">4</code><code class="py plain">):</code></div>
<div class="line number26 index25 alt1"><code class="py spaces">    </code><code class="py comments">"""Calculate a list of points (ball center) as if the balls were place in a pyramid"""</code></div>
<div class="line number27 index26 alt2"><code class="py spaces">    </code><code class="py comments">#the number of balls can be calculated as: int(BALLS_SIDE*(BALLS_SIDE+1)*(2*BALLS_SIDE+1)/6)</code></div>
<div class="line number28 index27 alt1"><code class="py spaces">    </code><code class="py plain">BALL_DIAMETER </code><code class="py keyword">=</code> <code class="py value">100</code></div>
<div class="line number29 index28 alt2"><code class="py spaces">    </code><code class="py plain">xyz_list </code><code class="py keyword">=</code> <code class="py plain">[]</code></div>
<div class="line number30 index29 alt1"><code class="py spaces">    </code><code class="py plain">sqrt2 </code><code class="py keyword">=</code> <code class="py value">2</code><code class="py keyword">*</code><code class="py keyword">*</code><code class="py plain">(</code><code class="py value">0.5</code><code class="py plain">)</code></div>
<div class="line number31 index30 alt2"><code class="py spaces">    </code><code class="py keyword">for</code> <code class="py plain">h </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(BALLS_SIDE):</code></div>
<div class="line number32 index31 alt1"><code class="py spaces">        </code><code class="py keyword">for</code> <code class="py plain">i </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(BALLS_SIDE</code><code class="py keyword">-</code><code class="py plain">h):</code></div>
<div class="line number33 index32 alt2"><code class="py spaces">            </code><code class="py keyword">for</code> <code class="py plain">j </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(BALLS_SIDE</code><code class="py keyword">-</code><code class="py plain">h):</code></div>
<div class="line number34 index33 alt1"><code class="py spaces">                </code><code class="py plain">height </code><code class="py keyword">=</code> <code class="py plain">h</code><code class="py keyword">*</code><code class="py plain">BALL_DIAMETER</code><code class="py keyword">/</code><code class="py plain">sqrt2 </code><code class="py keyword">+</code> <code class="py plain">BALL_DIAMETER</code><code class="py keyword">/</code><code class="py value">2</code></div>
<div class="line number35 index34 alt2"><code class="py spaces">                </code><code class="py plain">xyz_list </code><code class="py keyword">=</code> <code class="py plain">xyz_list </code><code class="py keyword">+</code> <code class="py plain">[[i</code><code class="py keyword">*</code><code class="py plain">BALL_DIAMETER </code><code class="py keyword">+</code> <code class="py plain">(h</code><code class="py keyword">+</code><code class="py value">1</code><code class="py plain">)</code><code class="py keyword">*</code><code class="py plain">BALL_DIAMETER</code><code class="py keyword">*</code><code class="py value">0.5</code><code class="py plain">, j</code><code class="py keyword">*</code><code class="py plain">BALL_DIAMETER </code><code class="py keyword">+</code> <code class="py plain">(h</code><code class="py keyword">+</code><code class="py value">1</code><code class="py plain">)</code><code class="py keyword">*</code><code class="py plain">BALL_DIAMETER</code><code class="py keyword">*</code><code class="py value">0.5</code><code class="py plain">, height]]</code></div>
<div class="line number36 index35 alt1"><code class="py spaces">    </code><code class="py keyword">return</code> <code class="py plain">xyz_list</code></div>
<div class="line number37 index36 alt2"> </div>
<div class="line number38 index37 alt1"><code class="py keyword">def</code> <code class="py plain">balls_setup(frame, positions):</code></div>
<div class="line number39 index38 alt2"><code class="py spaces">    </code><code class="py comments">"""Place a list of balls in a reference frame. The reference object (ball) must have been previously copied to the clipboard."""</code></div>
<div class="line number40 index39 alt1"><code class="py spaces">    </code><code class="py plain">nballs </code><code class="py keyword">=</code> <code class="py functions">len</code><code class="py plain">(positions)</code></div>
<div class="line number41 index40 alt2"><code class="py spaces">    </code><code class="py plain">step </code><code class="py keyword">=</code> <code class="py value">1.0</code><code class="py keyword">/</code><code class="py plain">(nballs </code><code class="py keyword">-</code> <code class="py value">1</code><code class="py plain">)</code></div>
<div class="line number42 index41 alt1"><code class="py spaces">    </code><code class="py keyword">for</code> <code class="py plain">i </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(nballs):</code></div>
<div class="line number43 index42 alt2"><code class="py spaces">        </code><code class="py plain">newball </code><code class="py keyword">=</code> <code class="py plain">frame.Paste()</code></div>
<div class="line number44 index43 alt1"><code class="py spaces">        </code><code class="py plain">newball.setName(</code><code class="py string">'ball '</code> <code class="py keyword">+</code> <code class="py functions">str</code><code class="py plain">(i)) </code><code class="py comments">#set item name</code></div>
<div class="line number45 index44 alt2"><code class="py spaces">        </code><code class="py plain">newball.setPose(transl(positions[i])) </code><code class="py comments">#set item position with respect to parent</code></div>
<div class="line number46 index45 alt1"><code class="py spaces">        </code><code class="py plain">newball.setVisible(</code><code class="py color1">True</code><code class="py plain">, </code><code class="py color1">False</code><code class="py plain">) </code><code class="py comments">#make item visible but hide the reference frame</code></div>
<div class="line number47 index46 alt2"><code class="py spaces">        </code><code class="py plain">newball.Recolor([</code><code class="py value">1</code><code class="py keyword">-</code><code class="py plain">step</code><code class="py keyword">*</code><code class="py plain">i, step</code><code class="py keyword">*</code><code class="py plain">i, </code><code class="py value">0.2</code><code class="py plain">, </code><code class="py value">1</code><code class="py plain">]) </code><code class="py comments">#set RGBA color</code></div>
<div class="line number48 index47 alt1"> </div>
<div class="line number49 index48 alt2"><code class="py keyword">def</code> <code class="py plain">cleanup_balls(parentnodes):</code></div>
<div class="line number50 index49 alt1"><code class="py spaces">    </code><code class="py comments">"""Delete all child items whose name starts with \"ball\", from the provided list of parent items."""</code></div>
<div class="line number51 index50 alt2"><code class="py spaces">    </code><code class="py plain">todelete </code><code class="py keyword">=</code> <code class="py plain">[]</code></div>
<div class="line number52 index51 alt1"><code class="py spaces">    </code><code class="py keyword">for</code> <code class="py plain">item </code><code class="py keyword">in</code> <code class="py plain">parentnodes:</code></div>
<div class="line number53 index52 alt2"><code class="py spaces">        </code><code class="py plain">todelete </code><code class="py keyword">=</code> <code class="py plain">todelete </code><code class="py keyword">+</code> <code class="py plain">item.Childs()</code></div>
<div class="line number54 index53 alt1"> </div>
<div class="line number55 index54 alt2"><code class="py spaces">    </code><code class="py keyword">for</code> <code class="py plain">item </code><code class="py keyword">in</code> <code class="py plain">todelete:</code></div>
<div class="line number56 index55 alt1"><code class="py spaces">        </code><code class="py keyword">if</code> <code class="py plain">item.Name().startswith(</code><code class="py string">'ball'</code><code class="py plain">):</code></div>
<div class="line number57 index56 alt2"><code class="py spaces">            </code><code class="py plain">item.Delete()</code></div>
<div class="line number58 index57 alt1"> </div>
<div class="line number59 index58 alt2"><code class="py keyword">def</code> <code class="py plain">TCP_On(toolitem, tcp_id):</code></div>
<div class="line number60 index59 alt1"><code class="py spaces">    </code><code class="py comments">"""Attach the closest object to the toolitem Htool pose,</code></div>
<div class="line number61 index60 alt2"><code class="py spaces">    </code><code class="py comments">furthermore, it will output appropriate function calls on the generated robot program (call to TCP_On)"""</code></div>
<div class="line number62 index61 alt1"><code class="py spaces">    </code><code class="py plain">toolitem.AttachClosest()</code></div>
<div class="line number63 index62 alt2"><code class="py spaces">    </code><code class="py plain">toolitem.RDK().RunMessage(</code><code class="py string">'Set air valve %i on'</code> <code class="py keyword">%</code> <code class="py plain">(tcp_id</code><code class="py keyword">+</code><code class="py value">1</code><code class="py plain">))</code></div>
<div class="line number64 index63 alt1"><code class="py spaces">    </code><code class="py plain">toolitem.RDK().RunProgram(</code><code class="py string">'TCP_On(%i)'</code> <code class="py keyword">%</code> <code class="py plain">(tcp_id</code><code class="py keyword">+</code><code class="py value">1</code><code class="py plain">));</code></div>
<div class="line number65 index64 alt2"><code class="py spaces">        </code> </div>
<div class="line number66 index65 alt1"><code class="py keyword">def</code> <code class="py plain">TCP_Off(toolitem, tcp_id, itemleave</code><code class="py keyword">=</code><code class="py value">0</code><code class="py plain">):</code></div>
<div class="line number67 index66 alt2"><code class="py spaces">    </code><code class="py comments">"""Detaches the closest object attached to the toolitem Htool pose,</code></div>
<div class="line number68 index67 alt1"><code class="py spaces">    </code><code class="py comments">furthermore, it will output appropriate function calls on the generated robot program (call to TCP_Off)"""</code></div>
<div class="line number69 index68 alt2"><code class="py spaces">    </code><code class="py plain">toolitem.DetachAll(itemleave)</code></div>
<div class="line number70 index69 alt1"><code class="py spaces">    </code><code class="py plain">toolitem.RDK().RunMessage(</code><code class="py string">'Set air valve %i off'</code> <code class="py keyword">%</code> <code class="py plain">(tcp_id</code><code class="py keyword">+</code><code class="py value">1</code><code class="py plain">))</code></div>
<div class="line number71 index70 alt2"><code class="py spaces">    </code><code class="py plain">toolitem.RDK().RunProgram(</code><code class="py string">'TCP_Off(%i)'</code> <code class="py keyword">%</code> <code class="py plain">(tcp_id</code><code class="py keyword">+</code><code class="py value">1</code><code class="py plain">));</code></div>
<div class="line number72 index71 alt1"> </div>
<div class="line number73 index72 alt2"> </div>
<div class="line number74 index73 alt1"><code class="py comments">#----------------------------------------------------------</code></div>
<div class="line number75 index74 alt2"><code class="py comments"># The program starts here:</code></div>
<div class="line number76 index75 alt1"> </div>
<div class="line number77 index76 alt2"><code class="py comments"># Any interaction with RoboDK must be done through RDK:</code></div>
<div class="line number78 index77 alt1"><code class="py plain">RDK </code><code class="py keyword">=</code> <code class="py plain">Robolink(robodk_path</code><code class="py keyword">=</code><code class="py string">"C:/robodk/bin/RoboDK.exe"</code><code class="py plain">, robodk_ip</code><code class="py keyword">=</code><code class="py string">'127.0.0.1'</code><code class="py plain">)</code></div>
<div class="line number79 index78 alt2"> </div>
<div class="line number80 index79 alt1"><code class="py comments"># Turn off automatic rendering (faster)</code></div>
<div class="line number81 index80 alt2"><code class="py plain">RDK.Render(</code><code class="py color1">False</code><code class="py plain">)</code></div>
<div class="line number82 index81 alt1"> </div>
<div class="line number83 index82 alt2"><code class="py comments">#RDK.Set_Simulation_Speed(500); # set the simulation speed</code></div>
<div class="line number84 index83 alt1"> </div>
<div class="line number85 index84 alt2"><code class="py comments"># Gather required items from the station tree</code></div>
<div class="line number86 index85 alt1"><code class="py plain">robot </code><code class="py keyword">=</code> <code class="py plain">RDK.Item(</code><code class="py string">'Fanuc M-710iC/50'</code><code class="py plain">)</code></div>
<div class="line number87 index86 alt2"><code class="py plain">robot_tools </code><code class="py keyword">=</code> <code class="py plain">robot.Childs()</code></div>
<div class="line number88 index87 alt1"><code class="py comments">#robottool = RDK.Item('MainTool')</code></div>
<div class="line number89 index88 alt2"><code class="py plain">frame1 </code><code class="py keyword">=</code> <code class="py plain">RDK.Item(</code><code class="py string">'Table 1'</code><code class="py plain">)</code></div>
<div class="line number90 index89 alt1"><code class="py plain">frame2 </code><code class="py keyword">=</code> <code class="py plain">RDK.Item(</code><code class="py string">'Table 2'</code><code class="py plain">)</code></div>
<div class="line number91 index90 alt2"> </div>
<div class="line number92 index91 alt1"><code class="py comments"># Copy a ball as an object (same as CTRL+C)</code></div>
<div class="line number93 index92 alt2"><code class="py plain">ballref </code><code class="py keyword">=</code> <code class="py plain">RDK.Item(</code><code class="py string">'reference ball'</code><code class="py plain">)</code></div>
<div class="line number94 index93 alt1"><code class="py plain">ballref.Copy()</code></div>
<div class="line number95 index94 alt2"> </div>
<div class="line number96 index95 alt1"><code class="py comments"># Run a pre-defined station program (in RoboDK) to replace the two tables</code></div>
<div class="line number97 index96 alt2"><code class="py plain">prog_reset </code><code class="py keyword">=</code> <code class="py plain">RDK.Item(</code><code class="py string">'Replace objects'</code><code class="py plain">)</code></div>
<div class="line number98 index97 alt1"><code class="py plain">prog_reset.RunProgram()</code></div>
<div class="line number99 index98 alt2"> </div>
<div class="line number100 index99 alt1"><code class="py comments"># Call custom procedure to remove old objects</code></div>
<div class="line number101 index100 alt2"><code class="py plain">cleanup_balls([frame1, frame2])</code></div>
<div class="line number102 index101 alt1"> </div>
<div class="line number103 index102 alt2"><code class="py comments"># Make a list of positions to place the objects</code></div>
<div class="line number104 index103 alt1"><code class="py plain">frame1_list </code><code class="py keyword">=</code> <code class="py plain">pyramid_calc(</code><code class="py value">4</code><code class="py plain">)</code></div>
<div class="line number105 index104 alt2"><code class="py plain">frame2_list </code><code class="py keyword">=</code> <code class="py plain">pyramid_calc(</code><code class="py value">4</code><code class="py plain">)</code></div>
<div class="line number106 index105 alt1"> </div>
<div class="line number107 index106 alt2"><code class="py comments"># Programmatically place the objects with a custom-made procedure</code></div>
<div class="line number108 index107 alt1"><code class="py plain">balls_setup(frame1, frame1_list)</code></div>
<div class="line number109 index108 alt2"> </div>
<div class="line number110 index109 alt1"><code class="py comments"># Delete previously generated tools</code></div>
<div class="line number111 index110 alt2"><code class="py keyword">for</code> <code class="py plain">tool </code><code class="py keyword">in</code> <code class="py plain">robot_tools:</code></div>
<div class="line number112 index111 alt1"><code class="py spaces">    </code><code class="py keyword">if</code> <code class="py plain">tool.Name().startswith(</code><code class="py string">'TCP'</code><code class="py plain">):</code></div>
<div class="line number113 index112 alt2"><code class="py spaces">        </code><code class="py plain">tool.Delete()</code></div>
<div class="line number114 index113 alt1"><code class="py spaces">        </code> </div>
<div class="line number115 index114 alt2"><code class="py comments"># Calculate tool frames for the suction cup tool of 6 suction cups</code></div>
<div class="line number116 index115 alt1"><code class="py plain">TCP_list </code><code class="py keyword">=</code> <code class="py plain">[]</code></div>
<div class="line number117 index116 alt2"><code class="py keyword">for</code> <code class="py plain">i </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(nTCPs):</code></div>
<div class="line number118 index117 alt1"><code class="py spaces">    </code><code class="py plain">TCPi_pose </code><code class="py keyword">=</code> <code class="py plain">transl(</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">100</code><code class="py plain">)</code><code class="py keyword">*</code><code class="py plain">rotz((</code><code class="py value">360</code><code class="py keyword">/</code><code class="py plain">nTCPs)</code><code class="py keyword">*</code><code class="py plain">i</code><code class="py keyword">*</code><code class="py plain">pi</code><code class="py keyword">/</code><code class="py value">180</code><code class="py plain">)</code><code class="py keyword">*</code><code class="py plain">transl(</code><code class="py value">125</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">)</code><code class="py keyword">*</code><code class="py plain">roty(pi</code><code class="py keyword">/</code><code class="py value">2</code><code class="py plain">)</code></div>
<div class="line number119 index118 alt2"><code class="py spaces">    </code><code class="py plain">TCPi </code><code class="py keyword">=</code> <code class="py plain">robot.AddTool(TCPi_pose, </code><code class="py string">'TCP %i'</code> <code class="py keyword">%</code> <code class="py plain">(i</code><code class="py keyword">+</code><code class="py value">1</code><code class="py plain">))</code></div>
<div class="line number120 index119 alt1"><code class="py spaces">    </code><code class="py plain">TCP_list.append(TCPi)</code></div>
<div class="line number121 index120 alt2"> </div>
<div class="line number122 index121 alt1"><code class="py plain">TCP_0 </code><code class="py keyword">=</code> <code class="py plain">TCP_list[</code><code class="py value">0</code><code class="py plain">]</code></div>
<div class="line number123 index122 alt2"> </div>
<div class="line number124 index123 alt1"><code class="py comments"># Turn on automatic rendering</code></div>
<div class="line number125 index124 alt2"><code class="py plain">RDK.Render(</code><code class="py color1">True</code><code class="py plain">)</code></div>
<div class="line number126 index125 alt1"> </div>
<div class="line number127 index126 alt2"><code class="py comments"># Move balls    </code></div>
<div class="line number128 index127 alt1"><code class="py plain">robot.setPoseTool(TCP_list[</code><code class="py value">0</code><code class="py plain">])</code></div>
<div class="line number129 index128 alt2"><code class="py plain">nballs_frame1 </code><code class="py keyword">=</code> <code class="py functions">len</code><code class="py plain">(frame1_list)</code></div>
<div class="line number130 index129 alt1"><code class="py plain">nballs_frame2 </code><code class="py keyword">=</code> <code class="py functions">len</code><code class="py plain">(frame2_list)</code></div>
<div class="line number131 index130 alt2"><code class="py plain">idTake </code><code class="py keyword">=</code> <code class="py plain">nballs_frame1 </code><code class="py keyword">-</code> <code class="py value">1</code></div>
<div class="line number132 index131 alt1"><code class="py plain">idLeave </code><code class="py keyword">=</code> <code class="py value">0</code></div>
<div class="line number133 index132 alt2"><code class="py plain">idTCP </code><code class="py keyword">=</code> <code class="py value">0</code></div>
<div class="line number134 index133 alt1"><code class="py plain">target_app_frame </code><code class="py keyword">=</code> <code class="py plain">transl(</code><code class="py value">2</code><code class="py keyword">*</code><code class="py plain">BALL_DIAMETER, </code><code class="py value">2</code><code class="py keyword">*</code><code class="py plain">BALL_DIAMETER, </code><code class="py value">4</code><code class="py keyword">*</code><code class="py plain">BALL_DIAMETER)</code><code class="py keyword">*</code><code class="py plain">roty(pi)</code><code class="py keyword">*</code><code class="py plain">transl(</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py keyword">-</code><code class="py plain">APPROACH)</code></div>
<div class="line number135 index134 alt2"> </div>
<div class="line number136 index135 alt1"><code class="py keyword">while</code> <code class="py plain">idTake &gt;</code><code class="py keyword">=</code> <code class="py value">0</code><code class="py plain">:</code></div>
<div class="line number137 index136 alt2"><code class="py spaces">    </code><code class="py comments"># ------------------------------------------------------------------</code></div>
<div class="line number138 index137 alt1"><code class="py spaces">    </code><code class="py comments"># first priority: grab as many balls as possible</code></div>
<div class="line number139 index138 alt2"><code class="py spaces">    </code><code class="py comments"># the tool is empty at this point, so take as many balls as possible (up to a maximum of 6 -&gt; nTCPs)</code></div>
<div class="line number140 index139 alt1"><code class="py spaces">    </code><code class="py plain">ntake </code><code class="py keyword">=</code> <code class="py functions">min</code><code class="py plain">(nTCPs, idTake </code><code class="py keyword">+</code> <code class="py value">1</code><code class="py plain">)</code></div>
<div class="line number141 index140 alt2"> </div>
<div class="line number142 index141 alt1"><code class="py spaces">    </code><code class="py comments"># approach to frame 1</code></div>
<div class="line number143 index142 alt2"><code class="py spaces">    </code><code class="py plain">robot.setPoseFrame(frame1)</code></div>
<div class="line number144 index143 alt1"><code class="py spaces">    </code><code class="py plain">robot.setPoseTool(TCP_0)</code></div>
<div class="line number145 index144 alt2"><code class="py spaces">    </code><code class="py plain">robot.MoveJ([</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">10</code><code class="py plain">,</code><code class="py keyword">-</code><code class="py value">200</code><code class="py plain">])</code></div>
<div class="line number146 index145 alt1"><code class="py spaces">    </code><code class="py plain">robot.MoveJ(target_app_frame)</code></div>
<div class="line number147 index146 alt2"> </div>
<div class="line number148 index147 alt1"><code class="py spaces">    </code><code class="py comments"># grab ntake balls from frame 1</code></div>
<div class="line number149 index148 alt2"><code class="py spaces">    </code><code class="py keyword">for</code> <code class="py plain">i </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(ntake):</code></div>
<div class="line number150 index149 alt1"><code class="py spaces">        </code><code class="py plain">TCPi </code><code class="py keyword">=</code> <code class="py plain">TCP_list[i]</code></div>
<div class="line number151 index150 alt2"><code class="py spaces">        </code><code class="py plain">robot.setPoseTool(TCPi)</code></div>
<div class="line number152 index151 alt1"><code class="py spaces">        </code><code class="py comments"># calculate target wrt frame1: rotation about Y is needed since Z and X axis are inverted</code></div>
<div class="line number153 index152 alt2"><code class="py spaces">        </code><code class="py plain">target </code><code class="py keyword">=</code> <code class="py plain">transl(frame1_list[idTake])</code><code class="py keyword">*</code><code class="py plain">roty(pi)</code><code class="py keyword">*</code><code class="py plain">rotx(</code><code class="py value">30</code><code class="py keyword">*</code><code class="py plain">pi</code><code class="py keyword">/</code><code class="py value">180</code><code class="py plain">)</code></div>
<div class="line number154 index153 alt1"><code class="py spaces">        </code><code class="py plain">target_app </code><code class="py keyword">=</code> <code class="py plain">target</code><code class="py keyword">*</code><code class="py plain">transl(</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py keyword">-</code><code class="py plain">APPROACH)</code></div>
<div class="line number155 index154 alt2"><code class="py spaces">        </code><code class="py plain">idTake </code><code class="py keyword">=</code> <code class="py plain">idTake </code><code class="py keyword">-</code> <code class="py value">1</code>       </div>
<div class="line number156 index155 alt1"><code class="py spaces">        </code><code class="py plain">robot.MoveL(target_app)</code></div>
<div class="line number157 index156 alt2"><code class="py spaces">        </code><code class="py plain">robot.MoveL(target)</code></div>
<div class="line number158 index157 alt1"><code class="py spaces">        </code><code class="py plain">TCP_On(TCPi, i)</code></div>
<div class="line number159 index158 alt2"><code class="py spaces">        </code><code class="py plain">robot.MoveL(target_app)</code></div>
<div class="line number160 index159 alt1"><code class="py spaces"> </code> </div>
<div class="line number161 index160 alt2"><code class="py spaces">    </code><code class="py comments"># ------------------------------------------------------------------</code></div>
<div class="line number162 index161 alt1"><code class="py spaces">    </code><code class="py comments"># second priority: unload the tool     </code></div>
<div class="line number163 index162 alt2"><code class="py spaces">    </code><code class="py comments"># approach to frame 2 and place the tool balls into table 2</code></div>
<div class="line number164 index163 alt1"><code class="py spaces">    </code><code class="py plain">robot.setPoseTool(TCP_0)</code></div>
<div class="line number165 index164 alt2"><code class="py spaces">    </code><code class="py plain">robot.MoveJ(target_app_frame)</code></div>
<div class="line number166 index165 alt1"><code class="py spaces">    </code><code class="py plain">robot.MoveJ([</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">10</code><code class="py plain">,</code><code class="py keyword">-</code><code class="py value">200</code><code class="py plain">])</code></div>
<div class="line number167 index166 alt2"><code class="py spaces">    </code><code class="py plain">robot.setPoseFrame(frame2)    </code></div>
<div class="line number168 index167 alt1"><code class="py spaces">    </code><code class="py plain">robot.MoveJ(target_app_frame)</code></div>
<div class="line number169 index168 alt2"><code class="py spaces">    </code><code class="py keyword">for</code> <code class="py plain">i </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(ntake):</code></div>
<div class="line number170 index169 alt1"><code class="py spaces">        </code><code class="py plain">TCPi </code><code class="py keyword">=</code> <code class="py plain">TCP_list[i]</code></div>
<div class="line number171 index170 alt2"><code class="py spaces">        </code><code class="py plain">robot.setPoseTool(TCPi)</code></div>
<div class="line number172 index171 alt1"><code class="py spaces">        </code><code class="py keyword">if</code> <code class="py plain">idLeave &gt; nballs_frame2</code><code class="py keyword">-</code><code class="py value">1</code><code class="py plain">:</code></div>
<div class="line number173 index172 alt2"><code class="py spaces">            </code><code class="py keyword">raise</code> <code class="py plain">Exception(</code><code class="py string">"No room left to place objects in Table 2"</code><code class="py plain">)</code></div>
<div class="line number174 index173 alt1"><code class="py spaces">        </code> </div>
<div class="line number175 index174 alt2"><code class="py spaces">        </code><code class="py comments"># calculate target wrt frame1: rotation of 180 about Y is needed since Z and X axis are inverted</code></div>
<div class="line number176 index175 alt1"><code class="py spaces">        </code><code class="py plain">target </code><code class="py keyword">=</code> <code class="py plain">transl(frame2_list[idLeave])</code><code class="py keyword">*</code><code class="py plain">roty(pi)</code><code class="py keyword">*</code><code class="py plain">rotx(</code><code class="py value">30</code><code class="py keyword">*</code><code class="py plain">pi</code><code class="py keyword">/</code><code class="py value">180</code><code class="py plain">)</code></div>
<div class="line number177 index176 alt2"><code class="py spaces">        </code><code class="py plain">target_app </code><code class="py keyword">=</code> <code class="py plain">target</code><code class="py keyword">*</code><code class="py plain">transl(</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py keyword">-</code><code class="py plain">APPROACH)</code></div>
<div class="line number178 index177 alt1"><code class="py spaces">        </code><code class="py plain">idLeave </code><code class="py keyword">=</code> <code class="py plain">idLeave </code><code class="py keyword">+</code> <code class="py value">1</code>       </div>
<div class="line number179 index178 alt2"><code class="py spaces">        </code><code class="py plain">robot.MoveL(target_app)</code></div>
<div class="line number180 index179 alt1"><code class="py spaces">        </code><code class="py plain">robot.MoveL(target)</code></div>
<div class="line number181 index180 alt2"><code class="py spaces">        </code><code class="py plain">TCP_Off(TCPi, i, frame2)</code></div>
<div class="line number182 index181 alt1"><code class="py spaces">        </code><code class="py plain">robot.MoveL(target_app)</code></div>
<div class="line number183 index182 alt2"> </div>
<div class="line number184 index183 alt1"><code class="py spaces">    </code><code class="py plain">robot.MoveJ(target_app_frame)</code></div>
<div class="line number185 index184 alt2"> </div>
<div class="line number186 index185 alt1"><code class="py comments"># Move home when the robot finishes</code></div>
<div class="line number187 index186 alt2"><code class="py plain">robot.MoveJ([</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">10</code><code class="py plain">,</code><code class="py keyword">-</code><code class="py value">200</code><code class="py plain">])</code></div>
<div class="line number188 index187 alt1"> </div>
<div class="line number189 index188 alt2"> </div>
<div class="line number190 index189 alt1"> </div>
<div class="line number191 index190 alt2"><code class="py comments"># Gather required items from the station tree</code></div>
<div class="line number192 index191 alt1"><code class="py plain">robot </code><code class="py keyword">=</code> <code class="py plain">RDK.Item(</code><code class="py string">'Fanuc M-710iC/50'</code><code class="py plain">)</code></div>
<div class="line number193 index192 alt2"><code class="py plain">robot_tools </code><code class="py keyword">=</code> <code class="py plain">robot.Childs()</code></div>
<div class="line number194 index193 alt1"><code class="py comments">#robottool = RDK.Item('MainTool')</code></div>
<div class="line number195 index194 alt2"><code class="py plain">frame1 </code><code class="py keyword">=</code> <code class="py plain">RDK.Item(</code><code class="py string">'Table 1'</code><code class="py plain">)</code></div>
<div class="line number196 index195 alt1"><code class="py plain">frame2 </code><code class="py keyword">=</code> <code class="py plain">RDK.Item(</code><code class="py string">'Table 2'</code><code class="py plain">)</code></div>
<div class="line number197 index196 alt2"> </div>
<div class="line number198 index197 alt1"> </div>
<div class="line number199 index198 alt2"> </div>
<div class="line number200 index199 alt1"><code class="py comments"># Call custom procedure to remove old objects</code></div>
<div class="line number201 index200 alt2"><code class="py plain">cleanup_balls([frame1 , frame2])</code></div>
<div class="line number202 index201 alt1"> </div>
<div class="line number203 index202 alt2"> </div>
<div class="line number204 index203 alt1"><code class="py comments"># Make a list of positions to place the objects</code></div>
<div class="line number205 index204 alt2"><code class="py plain">frame1_list </code><code class="py keyword">=</code> <code class="py plain">pyramid_calc(</code><code class="py value">4</code><code class="py plain">)</code></div>
<div class="line number206 index205 alt1"><code class="py plain">frame2_list </code><code class="py keyword">=</code> <code class="py plain">pyramid_calc(</code><code class="py value">4</code><code class="py plain">)</code></div>
<div class="line number207 index206 alt2"> </div>
<div class="line number208 index207 alt1"><code class="py comments"># Programmatically place the objects with a custom-made procedure</code></div>
<div class="line number209 index208 alt2"><code class="py plain">balls_setup(frame2, frame2_list)</code></div>
<div class="line number210 index209 alt1"> </div>
<div class="line number211 index210 alt2"><code class="py comments"># Delete previously generated tools</code></div>
<div class="line number212 index211 alt1"><code class="py keyword">for</code> <code class="py plain">tool </code><code class="py keyword">in</code> <code class="py plain">robot_tools:</code></div>
<div class="line number213 index212 alt2"><code class="py spaces">    </code><code class="py keyword">if</code> <code class="py plain">tool.Name().startswith(</code><code class="py string">'TCP'</code><code class="py plain">):</code></div>
<div class="line number214 index213 alt1"><code class="py spaces">        </code><code class="py plain">tool.Delete()</code></div>
<div class="line number215 index214 alt2"><code class="py spaces">        </code> </div>
<div class="line number216 index215 alt1"><code class="py comments"># Calculate tool frames for the suction cup tool of 6 suction cups</code></div>
<div class="line number217 index216 alt2"><code class="py plain">TCP_list </code><code class="py keyword">=</code> <code class="py plain">[]</code></div>
<div class="line number218 index217 alt1"><code class="py keyword">for</code> <code class="py plain">i </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(nTCPs):</code></div>
<div class="line number219 index218 alt2"><code class="py spaces">    </code><code class="py plain">TCPi_pose </code><code class="py keyword">=</code> <code class="py plain">transl(</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">100</code><code class="py plain">)</code><code class="py keyword">*</code><code class="py plain">rotz((</code><code class="py value">360</code><code class="py keyword">/</code><code class="py plain">nTCPs)</code><code class="py keyword">*</code><code class="py plain">i</code><code class="py keyword">*</code><code class="py plain">pi</code><code class="py keyword">/</code><code class="py value">180</code><code class="py plain">)</code><code class="py keyword">*</code><code class="py plain">transl(</code><code class="py value">125</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">)</code><code class="py keyword">*</code><code class="py plain">roty(pi</code><code class="py keyword">/</code><code class="py value">2</code><code class="py plain">)</code></div>
<div class="line number220 index219 alt1"><code class="py spaces">    </code><code class="py plain">TCPi </code><code class="py keyword">=</code> <code class="py plain">robot.AddTool(TCPi_pose, </code><code class="py string">'TCP %i'</code> <code class="py keyword">%</code> <code class="py plain">(i</code><code class="py keyword">+</code><code class="py value">1</code><code class="py plain">))</code></div>
<div class="line number221 index220 alt2"><code class="py spaces">    </code><code class="py plain">TCP_list.append(TCPi)</code></div>
<div class="line number222 index221 alt1"> </div>
<div class="line number223 index222 alt2"><code class="py plain">TCP_0 </code><code class="py keyword">=</code> <code class="py plain">TCP_list[</code><code class="py value">0</code><code class="py plain">]</code></div>
<div class="line number224 index223 alt1"> </div>
<div class="line number225 index224 alt2"> </div>
<div class="line number226 index225 alt1"> </div>
<div class="line number227 index226 alt2"><code class="py comments"># Move balls    </code></div>
<div class="line number228 index227 alt1"><code class="py plain">robot.setPoseTool(TCP_list[</code><code class="py value">0</code><code class="py plain">])</code></div>
<div class="line number229 index228 alt2"><code class="py plain">nballs_frame2 </code><code class="py keyword">=</code> <code class="py functions">len</code><code class="py plain">(frame2_list)</code></div>
<div class="line number230 index229 alt1"><code class="py plain">nballs_frame1 </code><code class="py keyword">=</code> <code class="py functions">len</code><code class="py plain">(frame1_list)</code></div>
<div class="line number231 index230 alt2"><code class="py plain">idTake </code><code class="py keyword">=</code> <code class="py plain">nballs_frame2 </code><code class="py keyword">-</code> <code class="py value">1</code></div>
<div class="line number232 index231 alt1"><code class="py plain">idLeave </code><code class="py keyword">=</code> <code class="py value">0</code></div>
<div class="line number233 index232 alt2"><code class="py plain">idTCP </code><code class="py keyword">=</code> <code class="py value">0</code></div>
<div class="line number234 index233 alt1"><code class="py plain">target_app_frame </code><code class="py keyword">=</code> <code class="py plain">transl(</code><code class="py value">2</code><code class="py keyword">*</code><code class="py plain">BALL_DIAMETER, </code><code class="py value">2</code><code class="py keyword">*</code><code class="py plain">BALL_DIAMETER, </code><code class="py value">4</code><code class="py keyword">*</code><code class="py plain">BALL_DIAMETER)</code><code class="py keyword">*</code><code class="py plain">roty(pi)</code><code class="py keyword">*</code><code class="py plain">transl(</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py keyword">-</code><code class="py plain">APPROACH)</code></div>
<div class="line number235 index234 alt2"> </div>
<div class="line number236 index235 alt1"><code class="py keyword">while</code> <code class="py plain">idTake &gt;</code><code class="py keyword">=</code> <code class="py value">0</code><code class="py plain">:</code></div>
<div class="line number237 index236 alt2"><code class="py spaces">    </code><code class="py comments"># ------------------------------------------------------------------</code></div>
<div class="line number238 index237 alt1"><code class="py spaces">    </code><code class="py comments"># first priority: grab as many balls as possible</code></div>
<div class="line number239 index238 alt2"><code class="py spaces">    </code><code class="py comments"># the tool is empty at this point, so take as many balls as possible (up to a maximum of 6 -&gt; nTCPs)</code></div>
<div class="line number240 index239 alt1"><code class="py spaces">    </code><code class="py plain">ntake </code><code class="py keyword">=</code> <code class="py functions">min</code><code class="py plain">(nTCPs, idTake </code><code class="py keyword">+</code> <code class="py value">1</code><code class="py plain">)</code></div>
<div class="line number241 index240 alt2"> </div>
<div class="line number242 index241 alt1"><code class="py spaces">    </code><code class="py comments"># approach to frame 1</code></div>
<div class="line number243 index242 alt2"><code class="py spaces">    </code><code class="py plain">robot.setPoseFrame(frame2)</code></div>
<div class="line number244 index243 alt1"><code class="py spaces">    </code><code class="py plain">robot.setPoseTool(TCP_0)</code></div>
<div class="line number245 index244 alt2"><code class="py spaces">    </code><code class="py plain">robot.MoveJ([</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">10</code><code class="py plain">,</code><code class="py keyword">-</code><code class="py value">200</code><code class="py plain">])</code></div>
<div class="line number246 index245 alt1"><code class="py spaces">    </code><code class="py plain">robot.MoveJ(target_app_frame)</code></div>
<div class="line number247 index246 alt2"> </div>
<div class="line number248 index247 alt1"><code class="py spaces">    </code><code class="py comments"># grab ntake balls from frame 1</code></div>
<div class="line number249 index248 alt2"><code class="py spaces">    </code><code class="py keyword">for</code> <code class="py plain">i </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(ntake):</code></div>
<div class="line number250 index249 alt1"><code class="py spaces">        </code><code class="py plain">TCPi </code><code class="py keyword">=</code> <code class="py plain">TCP_list[i]</code></div>
<div class="line number251 index250 alt2"><code class="py spaces">        </code><code class="py plain">robot.setPoseTool(TCPi)</code></div>
<div class="line number252 index251 alt1"><code class="py spaces">        </code><code class="py comments"># calculate target wrt frame1: rotation about Y is needed since Z and X axis are inverted</code></div>
<div class="line number253 index252 alt2"><code class="py spaces">        </code><code class="py plain">target </code><code class="py keyword">=</code> <code class="py plain">transl(frame2_list[idTake])</code><code class="py keyword">*</code><code class="py plain">roty(pi)</code><code class="py keyword">*</code><code class="py plain">rotx(</code><code class="py value">30</code><code class="py keyword">*</code><code class="py plain">pi</code><code class="py keyword">/</code><code class="py value">180</code><code class="py plain">)</code></div>
<div class="line number254 index253 alt1"><code class="py spaces">        </code><code class="py plain">target_app </code><code class="py keyword">=</code> <code class="py plain">target</code><code class="py keyword">*</code><code class="py plain">transl(</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py keyword">-</code><code class="py plain">APPROACH)</code></div>
<div class="line number255 index254 alt2"><code class="py spaces">        </code><code class="py plain">idTake </code><code class="py keyword">=</code> <code class="py plain">idTake </code><code class="py keyword">-</code> <code class="py value">1</code>       </div>
<div class="line number256 index255 alt1"><code class="py spaces">        </code><code class="py plain">robot.MoveL(target_app)</code></div>
<div class="line number257 index256 alt2"><code class="py spaces">        </code><code class="py plain">robot.MoveL(target)</code></div>
<div class="line number258 index257 alt1"><code class="py spaces">        </code><code class="py plain">TCP_On(TCPi, i)</code></div>
<div class="line number259 index258 alt2"><code class="py spaces">        </code><code class="py plain">robot.MoveL(target_app)</code></div>
<div class="line number260 index259 alt1"><code class="py spaces"> </code> </div>
<div class="line number261 index260 alt2"><code class="py spaces">    </code><code class="py comments"># ------------------------------------------------------------------</code></div>
<div class="line number262 index261 alt1"><code class="py spaces">    </code><code class="py comments"># second priority: unload the tool     </code></div>
<div class="line number263 index262 alt2"><code class="py spaces">    </code><code class="py comments"># approach to frame 2 and place the tool balls into table 2</code></div>
<div class="line number264 index263 alt1"><code class="py spaces">    </code><code class="py plain">robot.setPoseTool(TCP_0)</code></div>
<div class="line number265 index264 alt2"><code class="py spaces">    </code><code class="py plain">robot.MoveJ(target_app_frame)</code></div>
<div class="line number266 index265 alt1"><code class="py spaces">    </code><code class="py plain">robot.MoveJ([</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">10</code><code class="py plain">,</code><code class="py keyword">-</code><code class="py value">200</code><code class="py plain">])</code></div>
<div class="line number267 index266 alt2"><code class="py spaces">    </code><code class="py plain">robot.setPoseFrame(frame1)    </code></div>
<div class="line number268 index267 alt1"><code class="py spaces">    </code><code class="py plain">robot.MoveJ(target_app_frame)</code></div>
<div class="line number269 index268 alt2"><code class="py spaces">    </code><code class="py keyword">for</code> <code class="py plain">i </code><code class="py keyword">in</code> <code class="py functions">range</code><code class="py plain">(ntake):</code></div>
<div class="line number270 index269 alt1"><code class="py spaces">        </code><code class="py plain">TCPi </code><code class="py keyword">=</code> <code class="py plain">TCP_list[i]</code></div>
<div class="line number271 index270 alt2"><code class="py spaces">        </code><code class="py plain">robot.setPoseTool(TCPi)</code></div>
<div class="line number272 index271 alt1"><code class="py spaces">        </code><code class="py keyword">if</code> <code class="py plain">idLeave &gt; nballs_frame2</code><code class="py keyword">-</code><code class="py value">1</code><code class="py plain">:</code></div>
<div class="line number273 index272 alt2"><code class="py spaces">            </code><code class="py keyword">raise</code> <code class="py plain">Exception(</code><code class="py string">"No room left to place objects in Table 2"</code><code class="py plain">)</code></div>
<div class="line number274 index273 alt1"><code class="py spaces">        </code> </div>
<div class="line number275 index274 alt2"><code class="py spaces">        </code><code class="py comments"># calculate target wrt frame1: rotation of 180 about Y is needed since Z and X axis are inverted</code></div>
<div class="line number276 index275 alt1"><code class="py spaces">        </code><code class="py plain">target </code><code class="py keyword">=</code> <code class="py plain">transl(frame1_list[idLeave])</code><code class="py keyword">*</code><code class="py plain">roty(pi)</code><code class="py keyword">*</code><code class="py plain">rotx(</code><code class="py value">30</code><code class="py keyword">*</code><code class="py plain">pi</code><code class="py keyword">/</code><code class="py value">180</code><code class="py plain">)</code></div>
<div class="line number277 index276 alt2"><code class="py spaces">        </code><code class="py plain">target_app </code><code class="py keyword">=</code> <code class="py plain">target</code><code class="py keyword">*</code><code class="py plain">transl(</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py keyword">-</code><code class="py plain">APPROACH)</code></div>
<div class="line number278 index277 alt1"><code class="py spaces">        </code><code class="py plain">idLeave </code><code class="py keyword">=</code> <code class="py plain">idLeave </code><code class="py keyword">+</code> <code class="py value">1</code>       </div>
<div class="line number279 index278 alt2"><code class="py spaces">        </code><code class="py plain">robot.MoveL(target_app)</code></div>
<div class="line number280 index279 alt1"><code class="py spaces">        </code><code class="py plain">robot.MoveL(target)</code></div>
<div class="line number281 index280 alt2"><code class="py spaces">        </code><code class="py plain">TCP_Off(TCPi, i, frame2)</code></div>
<div class="line number282 index281 alt1"><code class="py spaces">        </code><code class="py plain">robot.MoveL(target_app)</code></div>
<div class="line number283 index282 alt2"> </div>
<div class="line number284 index283 alt1"><code class="py spaces">    </code><code class="py plain">robot.MoveJ(target_app_frame)</code></div>
<div class="line number285 index284 alt2"> </div>
<div class="line number286 index285 alt1"><code class="py comments"># Move home when the robot finishes</code></div>
<div class="line number287 index286 alt2"><code class="py plain">robot.MoveJ([</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">0</code><code class="py plain">,</code><code class="py value">10</code><code class="py plain">,</code><code class="py keyword">-</code><code class="py value">200</code><code class="py plain">])</code></div>
</div>
<div class="line number1 index0 alt2"><code class="py comments"></code></div><h1>About</h1>
<p>This is<span> </span><a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a></p>
<p>目前的 cmsimde 在編輯器下方新增一個 csave 按鈕, 意即 collabrative save, 當動態網際管理系統在多人同時維護登入維護網頁內容時, 編輯各頁面時段, 該頁面可能已經改版, 因此使用 csave 按鈕存檔時, 會導入當下最新的該頁面內容, 並試圖與編輯中的頁面內容進行合併.</p>
<p>使用 csave 按鈕存檔無法刪除頁面資料.</p>
<p>使用 Edit All 模式, 無法使用 csave 按鈕（尚未測試).</p>